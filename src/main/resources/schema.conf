
entities {
    Customer {
        fields {
            id: uuid
            email: string
            firstName: string
            lastName: string
        }
        relations {
            addresses { type: Address, inverse: customers }
            orders { type: Order, inverse: customer }
        }
    }
    Order {
        fields {
            id: uuid
            time: int
            subtotal: int
            tax: int
            total: int
        }
        relations {
            customer { type: Customer, inverse: orders }
            deliveryAddress { type: Address, inverse: orders }
            products { type: Product, inverse: orders }
        }
    }
    Product {
        fields {
            id: uuid
            name: string
            price: int
        }
        relations {
            orders { type: Order, inverse: products }
        }
    }
    Address {
        fields {
            street: string
            zipCode: string
        }
        relations {
            customers { type: Customer, inverse: addresses }
            orders { type: Order, inverse: deliveryAddress }
        }
    }
}
queries: {
    customerByFirstName {
        "-entity": "Customer"
        "-match": [firstName, "=", customerName]
        "-include": [firstName, lastName, email],
        "addresses": {
            "-include": [street, zipCode]
        }
        "orders": {
            "-include": [id, time, total]
            "products": {
                "-include": [id, name, price]
            }
        }
    }
}
queryConditions: {
    Customer: [
        ["firstName", "="]
        ["email", "=", "orders.deliveryAddress.street", "="]
    ]
}